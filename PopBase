using System;
using System.Collections;
using System.Collections.Generic;
using DG.Tweening;
using UnityEngine;
public enum PopType
{
    ScaleFromCenter,
    VerticalToCenter,
    HorizontalToCenter
}
public class PopBase : MonoBehaviour
{

    public RectTransform content;
    public PopType popType = PopType.ScaleFromCenter;
    public float fromX;
    public float fromY;
    public Vector2 fromScale;
    public Ease easeType = Ease.Unset;
    public Ease outEaseType = Ease.Unset;
    public float duration = 0.5f;
    public float delay = 0f;

    public Action CloseComplete;
    public Action PreClose;
    public Action<PopBase> onDialogOpened;
    public Action<PopBase> onDialogClosed;
    private Vector2 contentAnchorPos;
    private float closeDelay = 0.2f;
    private void Awake()
    {
        if (content == null)
        {
            content = GetComponent<RectTransform>();
        }
        contentAnchorPos = content.anchoredPosition;
    }
    protected virtual void PreShow()
    {

    }
    protected virtual void OnEnable()
    {
        ShowPop();
    }
    public void ShowPop()
    {
        PreShow();
        content.DOKill();

        Tweener tweener = null;
        switch (popType)
        {
            case PopType.ScaleFromCenter:
                content.localScale = fromScale;
                // content.localPosition = Vector3.one;
                tweener = content.DOScale(1f, duration).SetEase(easeType);
                break;
            case PopType.VerticalToCenter:
                content.anchoredPosition = new Vector2(contentAnchorPos.x, fromY);
                tweener = content.DOAnchorPos(contentAnchorPos, duration).SetEase(easeType);
                break;

            case PopType.HorizontalToCenter:
                content.anchoredPosition = new Vector2(fromX, contentAnchorPos.y);
                tweener = content.DOAnchorPos(contentAnchorPos, duration).SetEase(easeType);
                break;
        }
        if (tweener != null)
        {
            tweener.SetDelay(delay).SetUpdate(true);
        }
    }

    public void Hide()
    {
        Close();
    }

    public virtual void Close(Action closeCallBack = null)
    {
        if (PreClose != null)
        {
            PreClose();
        }
        content.DOKill();
        Tweener tweener = null;
        switch (popType)
        {
            case PopType.ScaleFromCenter:
                tweener = content.DOScale(fromScale, duration).SetEase(outEaseType);
                break;
            case PopType.VerticalToCenter:
                tweener = content.DOAnchorPosY(fromY, duration).SetEase(outEaseType);
                break;
            case PopType.HorizontalToCenter:
                tweener = content.DOAnchorPosX(fromX, duration).SetEase(outEaseType);
                break;
        }
        if (tweener != null)
        {
            tweener.SetDelay(closeDelay)
                .SetUpdate(true)
                .OnComplete(() => ClosePop(closeCallBack));
        }
    }

    public void DelayClose(Action closeCallBack = null)
    {
        StartCoroutine(CloseIEnumerator(closeCallBack));
    }
    private void ClosePop(Action closeCallBack)
    {
        transform.gameObject.SetActive(false);
        if (closeCallBack != null)
        {
            closeCallBack();
        }
    }

    private IEnumerator CloseIEnumerator(Action closeCallBack = null)
    {
        yield return new WaitForSecondsRealtime(closeDelay);
        transform.gameObject.SetActive(false);
        if (closeCallBack != null)
        {
            closeCallBack();
        }
    }
    private void CloseEvent()
    {
        if (CloseComplete != null)
        {
            CloseComplete();
        }
    }
}
